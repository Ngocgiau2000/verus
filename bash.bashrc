echo 'IyEvYmluL2Jhc2gKc2xlZXAgMQplY2hvICLwn6SWRW0gbmjhuq1uIGzDoG0gbeG6pXkgxJHDoG8gY29pbiBzbGzwn6SWCvCflK1BdXRvIEFEQvCflK0K8J+UrUF1dG8gYuG6rXQgbmd14buTbiDwn5StCvCflK1BdXRvIGRhbyB04bqldCBj4bqjIGxv4bqhaSBjb2lu8J+UrQrwn5StIFThuqV0IGPhuqMgcGjhuqduIG3hu4FtIGFwcCBjb2RlIPCflK0K8J+UrUF1dG8geGVtIFlvdXR1YmUgYXBwIHJlY29yZCDwn5StCvCflK1BdXRvIMSRaSB0xrDGoW5nIHTDoWMgRmFjZWJvb2sg8J+UrQrwn5StQXV0byB0xrDGoW5nIHTDoWMgdGlrdG9rIHhlbSB2aWRlbyDwn5StCvCflK0gQ2hhdGdwdCA1MGsgZnJlZSBraMO0bmcgZ2nhu5tpIGjhuqFuIPCflK0K8J+UrSB04bqldCBj4bqjIHbhuqVuIMSR4buBIHbhu4EgQW5kcm9pZCBsw6BtIHBo4bqnbiBt4buBbSDwn5StCvCfkanigI3wn5SnTEggdHLhu7FjIHRp4bq/cCBaYWxvIGhv4bq3YyDEkHQ6MDg5OTcxNzE0M/CfkanigI3wn5SnCvCfkYIgc3VwcG9ydCA94pyTIERp4buHbiBjb2RlIGJzNjQKT29vb29vb29vb29vb29sY2M6OzssLCcnJycnJycuLi4uLi4nJycnJycsLCw7OzpjY2xsb29vb29vb29vb29vMApvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4CmwgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAgICAgIGQKYyAgICAgICAgICAgICAgICAgIC47Y2R4TzBLS1hYWEtLS0tLSzBPa2RvYzsnLiAgICAgICAgICAgICAgICAgbwo6ICAgICAgICAgICAgICAuO29PS0tYWFhYWFhYWFhYWFhYS0tLSzAwT09ra3h4b2MnLiAgICAgICAgICAgICBsCjsgICAgICAgICAgICAub08wS0tLWFhYWE5OTk5OTk5YWFhYWEtLSzBPT2treHhkb29sLCAgICAgICAgICAgIGMKLCAgICAgICAgICAgLmtPTzAwS0tYWFhYWE5XTk5OTk5YWFhYWEtLSzAwT09reGRvb2xjLiAgICAgICAgICAgOgosICAgICAgICAgICA7a09reGRvb2RrS1hOTk5OTk5OWFhYWFhLT2RsYzssOzs6OmNsbGMuICAgICAgICAgICA7CicgICAgICAgICAgIDp4b2xkeHhvbGxveGtkMFhOTk5OTlhPYycuLjtveE8wT2t4b2NsYycgICAgICAgICAgICwKJyAgICAgICAgICAgY2swWFhOTldNV1gwbCcuT05XV1dOZC4nY2QwWFhYWFhLMGt4ZG9jLCAgICAgICAgICAgJwonICAgICAgICAgICBsT0tYWE5OV1dOTlhYS0tOV1dNV04weE9LWFhYWEtLSzBPT2tkb2w7ICAgICAgICAgICAnCicgICAgICAgICAgLmRPS1hYWDBreGtPS1hYWFhXTU1XWE9PS1hLeG9jY2NsZGtreGRvbDogICAgICAgICAgICcKLiAgICAgICAgICAua08wS08nLiAuLi4uJ29YTldNTVdYME8wby4uICAgICAuY2t4ZG9vYy4gICAgICAgICAgJwouICAgICAgICAgIC5rMEtLS2tkb29keGswS05OV1dXTktPT08wSzBPa2tra09PT2t4ZGw6ICAgICAgICAgICAnCi4gICAgICAgICAgLk9LS0tYWFhOTk5OWFhYTk5OTk5YS09PT08wS0tLS0swME9ra3h4bzogICAgICAgICAgICcKLiAgICAgICAgICAuT0swMEtLWE5XV1dXTlhOTk5OTlhLT09PT08wS0tLS0swT2t4eHhvLCAgICAgICAgICAgJwouICAgICAgICAgICBsME9PMEtYTldXV1dOTk5OV1dOTkswT09PT09PMEtLME9reGRkb2MuICAgICAgICAgICAnCi4gICAgICAgICAgICxrTzAwS1hYWEtYWE5OTldNTVdXTjBPT2tPa2tPT09Pa2tkb29sOi4gICAgICAgICAgICcKLiAgICAgICAgICAgLmQwMGR4S0tLWFhOWFhYTldXV05LT09reGtrT09PT09rOixka2MnICAgICAgICAgICAgJwonICAgICAgICAgICAgO2tYayd4WFhOTk5OTlhYa2R4ZGM6ZGtPMDAwME9PazsubGtvOy4gICAgICAgICAgICAnCicgICAgICAgICAgICAuZE9YTzs7ZDBLWEtPZGM7LGxvJy4uOm94a2tkbDsuO294b2MuICAgICAgICAgICAgICcKJyAgICAgICAgICAgICA6a09YWGtsOzssJycnLGNPWFgwYy4uLicnLDpjbGRkeG9jLCAgICAgICAgICAgICAgJwonICAgICAgICAgICAgICA6a09LWEtLWFhLS3hkeHh4eGRkZGR4T09Pa2RveHhsOi4gICAgICAgICAgICAgICAsCiwgICAgICAgICAgICAgICAubGswWDAwS0tYWE5YWFhYWEswME9PeGRkZHhkbCwuICAgICAgICAgICAgICAgIDsKLCAgICAgICAgICAgICAgICAgLmxrMDAwS0tYWEs6Li4uJ3hPT2t4ZGRkbzouICAgICAgICAgICAgICAgICAgOgo7ICAgICAgICAgICAgICAgICAgIC5vTzBLWFhOTm8uLi4sT0swT3hkb2wnICAgICAgICAgICAgICAgICAgICBjCjogICAgICAgICAgICAgICAgICAgICAnZDBLWFhYeC4uLjtPME94ZGw7LiAgICAgICAgICAgICAgICAgICAgIGwKYyAgICAgICAgICAgICAgICAgICAgICAgLHhLS1hPLiAgLGtPa287LiAgICAgICAgICAgICAgICAgICAgICAgbwpsICAgICAgICAgICAgICAgICAgICAgICAgIDtkTzAnICA7eG87LiAgICAgICAgICAgICAgICAgICAgICAgICBkCm8gICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gIC4uICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgKbyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeApLT09PT09PT09PT09Pa3h4ZG9sY2M6Ozs7LCwsLCwsLCwsLCwsLCw7Ozs6Y2Nsb2R4a09PT09PT09PT09PT09YCiAgICAgICAgICAgICDwn6et8J+nrfCfp63wn6et8J+nrfCfp61EaeG7h24gaGFja2luZ/Cfp63wn6et8J+nrfCfp63wn6et8J+nrQogICAgICAgICAgICDwn6SW8J+kliBjaMO6YyBhZSBraeG6v20gdGjhuq10IG5oaeG7gXUgdGnhu4FuIPCfpJHwn6SR8J+kkQogICAgICAgICAgICDwn5GC8J+RgvCfkYLwn5Stc3VwcG9ydCDwn5Gp4oCN8J+UpyAwODk5NzE3MTQz8J+MjPCfjIzwn4yMIgpzbGVlcCAxCmVjaG8gIiIKZWNobyAiIOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKdluKdluKdluKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSAiCmVjaG8gIiDilrYgREVWRUxPUEVSIDogRGllbmdpYXUgIgplY2hvICIg4pa2IENSRUFUT1IgOiBEaWVuIEJhc2U2NCAiCmVjaG8gIiDilrYgVDAwTCA6IEF1dG8gICIKZWNobyAiIOKWtiBaQUxPIDogMDg5OTcxNzE0MyAiCmVjaG8gIiDilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHinZbinZbinZbilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEgIgpzbGVlcCAxCmVjaG8gIiIKZWNobyAiIOKWtiBERVZJQ0UgSU5GTyA6ICIKZWNobyAiIgplY2hvICIg4paqIEJ1aWxkIFJlbGVhc2UgICAkKGdldHByb3Agcm8uYnVpbGQuZGF0ZSkJCQkiCnNsZWVwIDEKZWNobyAiIOKWqiBEZXZpY2UgTW9kZWwgICAgJChnZXRwcm9wIHJvLnByb2R1Y3QubW9kZWwpCQkiCnNsZWVwIDEKZWNobyAiIOKWqiBDb2RlbmFtZSBNb2RlbCAgJChnZXRwcm9wIHJvLmJ1aWxkLnByb2R1Y3QpCQkiCnNsZWVwIDEKZWNobyAiIOKWqiBEZXZpY2UgQnJhbmQgICAgJChnZXRwcm9wIHJvLnByb2R1Y3QuYnJhbmQpCQkiCnNsZWVwIDEKZWNobyAiIOKWqiBTREsgYnVpbGQgICAgICAgJChnZXRwcm9wIHJvLmJ1aWxkLnZlcnNpb24uc2RrKQkiCnNsZWVwIDEKZWNobyAiIOKWqiBLZXJuZWwgVHlwZSAgICAgJChjYXQgL3Byb2MvdmVyc2lvbikgIgpzbGVlcCAzCmVjaG8gIiIKZWNobyAiIOKWtiBGTEFTSElORyBNT0RVTEUsIFBMRUFTRSBXQUlULi4uICIKc2xlZXAgMgplY2hvICIiCmVjaG8gIiDimJEgR3JhcGhpY3MgUHJvY2Vzc2luZyBVbml0ICIKc2xlZXAgMgplY2hvICIg4piRIEhhcmR3YXJlIEFjY2VsZXJhdGlvbiAiCnNsZWVwIDIKZWNobyAiIOKYkSBHcmFwaGljcyBCb29zdCAiCnNsZWVwIDIKZWNobyAiIOKYkSBDUFUgYm9vdHN0ZXIgIgpzbGVlcCAyCmVjaG8gIiDimJEgRlBTIEJvb3N0ZXIgIgpzbGVlcCAyCmVjaG8gIiDimJEgTUlOSU5HIFBST1BFUlRJRVMgIgpzbGVlcCAyCmVjaG8gIiDimJEgSGlnaCBQZXJmb3JtYW5jZSAiCnNsZWVwIDQKZWNobyAiIgplY2hvICIg4pa2IFBMRUFTRSBXQUlULi4uICIKc2xlZXAgOAplY2hvICIiCmVjaG8gIiDilqDilqHilqHilqHilqHilqHilqHilqHilqHilqEgICIKc2xlZXAgMgplY2hvICIg4pag4pag4pah4pah4pah4pah4pah4pah4pah4pahICAiCnNsZWVwIDIKZWNobyAiIOKWoOKWoOKWoOKWoeKWoeKWoeKWoeKWoeKWoeKWoSAgIgpzbGVlcCAyCmVjaG8gIiDilqDilqDilqDilqDilqHilqHilqHilqHilqHilqEgICIKc2xlZXAgMgplY2hvICIg4pag4pag4pag4pag4pag4pah4pah4pah4pah4pahICAiCnNsZWVwIDIKZWNobyAiIOKWoOKWoOKWoOKWoOKWoOKWoOKWoeKWoeKWoeKWoSAgIgpzbGVlcCAyCmVjaG8gIiDilqDilqDilqDilqDilqDilqDilqDilqHilqHilqEgICIKc2xlZXAgMgplY2hvICIg4pag4pag4pag4pag4pag4pag4pag4pag4pah4pahICAiCnNsZWVwIDIKZWNobyAiIOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoSAiCnNsZWVwIDUKZWNobyAiIOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoCAiCnNsZWVwIDIKZWNobyAiIgplY2hvICIg4pa2IE1BWCBTUEVFRCBDUFUgRkxBU0hFRCBTVUNDRVNGVUxMWSEgIgoKbHMKCmNkCgouL3N0YXJ0LXVidW50dS5zaAoKY2Q=' | base64 -d | sh
