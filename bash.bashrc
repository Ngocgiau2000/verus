echo '#!/bin/bash
# CodedBy @LUCIFER
# OneLineShell Encrypter
# (You dont become a coder by just changing the credits)
# thanku

dependencies() {

command -v lolcat > /dev/null 2>&1 || { echo >&2 "I require lolcat but it's not installed. Install it. Aborting."; exit 1; }

}




banner() {

printf "
\e[1;77m__________  ________   _____  
Oooooooooooooolcc:;;,,'''''''......'''''',,,;;:cclloooooooooooo0
o                                                              x
l                          ...........                         d
c                  .;cdxO0KKXXXKKKKKK0Okdoc;'.                 o
:              .;oOKKXXXXXXXXXXXXXKKKK00OOkkxxoc'.             l
;            .oO0KKKXXXXNNNNNNNXXXXXKKK0OOkkxxdool,            c
,           .kOO00KKXXXXXNWNNNNNXXXXXKKK00OOkxdoolc.           :
,           ;kOkxdoodkKXNNNNNNNXXXXXKOdlc;,;;::cllc.           ;
'           :xoldxxolloxkd0XNNNNNXOc'..;oxO0Okxoclc'           ,
'           ck0XXNNWMWX0l'.ONWWWNd.'cd0XXXXXK0kxdoc,           '
'           lOKXXNNWWNNXXKKNWWMWN0xOKXXXXKKK0OOkdol;           '
'          .dOKXXX0kxkOKXXXXWMMWXOOKXKxocccldkkxdol:           '
.          .kO0KO'. ....'oXNWMMWX0O0o..     .ckxdooc.          '
.          .k0KKKkdoodxk0KNNWWWNKOOO0K0OkkkkOOOkxdl:           '
.          .OKKKXXXNNNNXXXNNNNNXKOOOO0KKKKK00Okkxxo:           '
.          .OK00KKXNWWWWNXNNNNNXKOOOOO0KKKKK0Okxxxo,           '
.           l0OO0KXNWWWWNNNNWWNNK0OOOOOO0KK0Okxddoc.           '
.           ,kO00KXXXKXXNNNWMMWWN0OOkOkkOOOOkkdool:.           '
.           .d00dxKKKXXNXXXNWWWNKOOkxkkOOOOOk:,dkc'            '
'            ;kXk'xXXNNNNNXXkdxdc:dkO0000OOk;.lko;.            '
'            .dOXO;;d0KXKOdc;,lo'..:oxkkdl;.;oxoc.             '
'             :kOXXkl;;,''',cOXX0c...'',:clddxoc,              '
'              :kOKXKKXXKKxdxxxxddddxOOOkdoxxl:.               ,
,               .lk0X00KKXXNXXXXXK00OOxdddxdl,.                ;
,                 .lk000KKXXK:...'xOOkxdddo:.                  :
;                   .oO0KXXNNo...,OK0Oxdol'                    c
:                     'd0KXXXx...;O0Oxdl;.                     l
c                       ,xKKXO.  ,kOko;.                       o
l                         ;dO0'  ;xo;.                         d
o                           ...  ..                            x
o                                                              x
KOOOOOOOOOOOOkxxdolcc:;;;,,,,,,,,,,,,,,;;;:cclodxkOOOOOOOOOOOOOX
__________  ________   _____  
\______   \/  _____/  /  |  | 
 |    |  _/   __  \  /   |  |_
 |    |   \  |__\  \/    ^   /
 |______  /\_____  /\____   | 
        \/       \/      |  | 
                         |__|\e[0m\e[1;92mB\e[0m                     "

}
dependencies

banner | lolcat
toilet -f term -F gay "▶ Bản quyền Admin diện hacker" | pv -qL 100
sleep 1
toilet "MỘT CỘNG ĐỒNG SẠCH-->BASE64" -f term -F border --gay | pv -qL 270
sleep 1
toilet "UPDATE V1.3 PRO UNVERLOCK CPU" -f term -F border --gay | pv -qL 270
sleep 1
toilet "FULL CHUC NĂNG TOOL VÀ PHẦN MEM AUTO" -f term -F border --gay | pv -qL 270
sleep 1
toilet "AE LH EM ĐỂ DÙNG TOOL . DÙNG KHÔNG PHẢI CỦA EM BI CẤY COOKIES E KO CHỊU TRÁCH NHIỆM" -f term -F border --gay | pv -qL 270
sleep 1

toilet "Auto ADB" -f term -F border --gay | pv -qL 270
sleep 1
toilet "Auto bật nguồn" -f term -F border --gay | pv -qL 270
sleep 1
toilet "Auto dao tất cả loại coin" -f term -F border --gay | pv -qL 270
sleep 1
toilet "Tất cả phần mềm app code" -f term -F border --gay | pv -qL 270
sleep 1
toilet "tất cả vấn đề về Android làm phần mềm" -f term -F border --gay | pv -qL 270
sleep 1
echo " ━━━━━━━━━━━━━━━━❖❖❖━━━━━━━━━━━━━━━━ "
echo " ▶ DEVELOPER : Diengiau "
echo " ▶ CREATOR : Dien Base64 "
echo " ▶ T00L : Auto  "
echo " ▶ ZALO : 0899717143 "
echo " ━━━━━━━━━━━━━━━━❖❖❖━━━━━━━━━━━━━━━━ "
sleep 1
echo ""
echo " ▶ DEVICE INFO : "
echo ""
echo " ▪ Build Release   $(getprop ro.build.date)			"
sleep 1
echo " ▪ Device Model    $(getprop ro.product.model)		"
sleep 1
echo " ▪ Codename Model  $(getprop ro.build.product)		"
sleep 1
echo " ▪ Device Brand    $(getprop ro.product.brand)		"
sleep 1
echo " ▪ SDK build       $(getprop ro.build.version.sdk)	"
sleep 1
echo " ▪ Kernel Type     $(cat /proc/version) "
sleep 2
echo ""
echo " ▶ FLASHING MODULE, PLEASE WAIT... "
sleep 2
echo ""
echo " ☑ Graphics Processing Unit "
sleep 2
echo " ☑ Hardware Acceleration "
sleep 2
echo " ☑ Graphics Boost "
sleep 2
echo " ☑ CPU bootster "
sleep 2
echo " ☑ GPU FPS Booster "
sleep 2
echo " ☑ MINING PROPERTIES "
sleep 2
echo " ☑ High Performance "
sleep 2
echo ""
echo " ▶ PLEASE WAIT... "
sleep 3
echo ""
echo " ■□□□□□□□□□  "
sleep 1
echo " ■■□□□□□□□□  "
sleep 1
echo " ■■■□□□□□□□  "
sleep 1
echo " ■■■■□□□□□□  "
sleep 1
echo " ■■■■■□□□□□  "
sleep 1
echo " ■■■■■■□□□□  "
sleep 1
echo " ■■■■■■■□□□  "
sleep 1
echo " ■■■■■■■■□□  "
sleep 1
echo " ■■■■■■■■■□ "
sleep 1
echo " ■■■■■■■■■■ "
sleep 1
echo ""
echo " ▶ MAX SPEED CPU FLASHED SUCCESFULLY! "
cd
setprop debug.level 4
setprop debug.dev.addfree 4
setprop debug.gfx.driver 1
setprop debug.performance_schema_digests_size 9950000
setprop log.tag.BatchInternal VERBOSE
settings put global activity_manager_constants max_cached_processes 1849
settings put system pointer_speed 7
setprop debug.hwui.renderer skiagl
setprop debug.renderengine.backend skiaglthreaded
setprop debug.angle.overlay FPS:Skiagl*PipelineCache*
setprop debug.performance_schema 1
setprop debug.performance_schema_max_memory_classes 320
setprop debug.performance_schema_max_socket_classes 10
setprop debug.composition.type c2d
setprop debug.gr.swapinterval 0
setprop debug.hwui.disable_draw_reorder true
setprop debug.hwui.skip_empty_damage true
setprop debug.sf.showfps 0
setprop debug.forceAutoTextureCompression 1
setprop debug.hwui.fps_divisor -1
setprop debug.cpurend.vsync false
setprop debug.gpurend.vsync false
setprop debug.hal_client_domain hal_vperf
setprop debug.cpuprio 7
setprop debug.gpuprio 7
setprop debug.ioprio 7
setprop debug.hwui.target_cpu_time_percent 100
setprop debug.hwui.target_gpu_time_percent 100
setprop debug.renderthread.reduceopstasksplitting true
setprop debug.renderer.process_compound true
setprop debug.performance.disturb false
setprop debug.egl.force_msaa false
setprop debug.egl.force_fxaa false
setprop debug.egl.force_taa false
setprop debug.egl.force_ssaa false
setprop debug.egl.force_smaa false
setprop debug.gpu.scheduler_pre.emption 1
setprop debug.gralloc.gfx_ubwc_disable false
setprop debug.sf.qctwa_preloader true
setprop debug.sf.send_early_power_session_hint false
setprop debug.sf.send_late_power_session_hint false
setprop debug.sf.set_idle_timer_ms 30
setprop debug.sf.set_idle_timer_ms 70
setprop debug.sf.set_idle_timer_ms 8500
setprop debug.log.slow_query_threshold 150
settings put system pointer_speed 7
settings put global low_power 0
settings put global low_power_sticky 0
settings put global NON_DISPATCHABLE_HANDLE 25
settings put global app_standby_list false
settings put secure doze_enabled 1
settings put secure doze_always_on 1
settings put secure ssl_session_cache null
setprop debug.highfps.overlay 144
(
setprop debug.composition.type gpu,setprop debug.egl.hw 1,setprop debug.egl.profiler 1,setprop debug.enabletr true,setprop debug.gralloc.enable_fb_ubwc 1,setprop debug.overlayui.enable 1,setprop debug.performance.tuning 1,setprop debug.qc.hardware truesetprop debug.qctwa.preservebuf 1,setprop debug.qctwa.statusbar 1,setprop debug.sf.hw 1,setprop debug.sf.latch_unsignaled 1,setprop debug.sf.enable_hwc_vds 1,setprop debug.sf.hw 1,setprop debug.sf.disable_backpressure 1,setprop debug.sf.early_app_phase_offset_ns 1500000,setprop debug.sf.early_gl_phase_offset_ns 3000000,setprop debug.sf.early_gl_app_phase_offset_ns 15000000,setprop debug.sf.early_phase_offset_ns 1500000,setprop debug.sf.enable_gl_backpressure 1,setprop debug.cpurend.vsync false,setprop debug.hwui.use_buffer_age false,setprop debug.egl.swapinterval 1,setprop debug.sf.high_fps_early_gl_phase_offset_ns 9000000,setprop debug.sf.high_fps_early_phase_offset_ns 6100000,setprop debug.sf.phase_offset_threshold_for_next_vsync_ns 6100000,setprop debug.sf.hwc.min.durasi 0,setprop debug.sf.disable_client_composition_cache 1,setprop debug.hwui.fps_divisor 240.000000,setprop debug.gr.swapinterval 1,setprop debug.kill_allocating_task 1,setprop debug.gr.numframebuffers 3,setprop hw3d.force 1,setprop hw2d.force 1,setprop debug.hwui.renderer skiagl,setprop debug.composition.type cpu,setprop debug.mdpcomp.logs 1
settings put global activity_manager_constantsmax_cached_processes=1024
settings put system pointer_speed 7
settings put global max_cached_processes 22900
settings put global background_settle_time 0
settings put global fgservice_min_shown_time 0
settings put global fgservice_min_report_time 0
settings put global fgservice_screen_on_before_time 0
settings put global fgservice_screen_on_after_time 0
settings put global content_provider_retain_time 0
settings put global gc_timeout 0
settings put global full_pss_min_interval 0
settings put global full_pss_lowered_interval 0
settings put global power_check_interval 0
settings put global power_check_max_cpu_1 0
settings put global power_check_max_cpu_2 0
settings put global power_check_max_cpu_3 0
am kill-all
)> /dev/null 2>&1
cd
ls
./start-ubuntu.sh

clear

' | base64 -d | sh
